{
	"name": "dataflowMovie1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "MovieADLS"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "RankMoviewByRatings"
				},
				{
					"name": "aggregateRatings"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          RottenTomato as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> MovieADLS",
				"MovieADLS select(mapColumn(",
				"          movie,",
				"          title,",
				"          genres,",
				"          year,",
				"          Rating,",
				"          RottenTomato",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 filter(toInteger(year)>1950) ~> filter1",
				"filter1 derive(PrimaryGenre = split(genres,\"|\")[1]) ~> derivedColumn1",
				"derivedColumn1 window(over(PrimaryGenre,",
				"          year),",
				"     desc(RottenTomato, true),",
				"     RatingsRank = rank()) ~> RankMoviewByRatings",
				"RankMoviewByRatings aggregate(groupBy(PrimaryGenre,",
				"          year),",
				"     AverateRating = avg(toInteger(RottenTomato)),",
				"          HighestRated = first(title),",
				"          LowestRated = last(title),",
				"          NumberOfMovies = count()) ~> aggregateRatings",
				"aggregateRatings alterRow() ~> alterRow1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          RottenTomato as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}